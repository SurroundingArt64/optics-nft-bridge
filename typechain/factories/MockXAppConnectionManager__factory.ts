/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockXAppConnectionManager,
  MockXAppConnectionManagerInterface,
} from "../MockXAppConnectionManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_home",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "home",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161014c38038061014c8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060b9806100936000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80639fa92f9d14602d575b600080fd5b6033605f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea2646970667358221220024a4145bb38f394b5c1161f186151908dc208bf54d7b5f8734f38d028c6e8e864736f6c63430007060033";

export class MockXAppConnectionManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _home: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockXAppConnectionManager> {
    return super.deploy(
      _home,
      overrides || {}
    ) as Promise<MockXAppConnectionManager>;
  }
  getDeployTransaction(
    _home: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_home, overrides || {});
  }
  attach(address: string): MockXAppConnectionManager {
    return super.attach(address) as MockXAppConnectionManager;
  }
  connect(signer: Signer): MockXAppConnectionManager__factory {
    return super.connect(signer) as MockXAppConnectionManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockXAppConnectionManagerInterface {
    return new utils.Interface(_abi) as MockXAppConnectionManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockXAppConnectionManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockXAppConnectionManager;
  }
}
