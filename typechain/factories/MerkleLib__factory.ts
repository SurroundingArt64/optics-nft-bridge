/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MerkleLib, MerkleLibInterface } from "../MerkleLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
      {
        internalType: "bytes32[32]",
        name: "_branch",
        type: "bytes32[32]",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "branchRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "_current",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6101b7610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806377d63d1d1461003a575b600080fd5b6100b2600480360361044081101561005157600080fd5b810190808035906020019092919080610400019060208060200260405190810160405280929190826020800280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291905050506100c8565b6040518082815260200191505060405180910390f35b600083905060005b602081101561017957600060018285901c16905060008583602081106100f257fe5b602002015190506001821415610138578084604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120935061016a565b838160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012093505b505080806001019150506100d0565b50939250505056fea2646970667358221220548adf6fad77b9743465a69d3644af9082bf97d1216c17a252f7028c64e5833f64736f6c63430007060033";

export class MerkleLib__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleLib> {
    return super.deploy(overrides || {}) as Promise<MerkleLib>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleLib {
    return super.attach(address) as MerkleLib;
  }
  connect(signer: Signer): MerkleLib__factory {
    return super.connect(signer) as MerkleLib__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleLibInterface {
    return new utils.Interface(_abi) as MerkleLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleLib {
    return new Contract(address, _abi, signerOrProvider) as MerkleLib;
  }
}
