/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleTreeManager,
  MerkleTreeManagerInterface,
} from "../MerkleTreeManager";

const _abi = [
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tree",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108d6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd14610046578063ebf0c71714610064578063fd54b22814610082575b600080fd5b61004e6100a0565b6040518082815260200191505060405180910390f35b61006c6100ac565b6040518082815260200191505060405180910390f35b61008a6100bd565b6040518082815260200191505060405180910390f35b60008060200154905090565b60006100b860006100c9565b905090565b60008060200154905081565b60006100dc826100d76100e3565b6107af565b9050919050565b6100eb61087d565b6000816000602081106100fa57fe5b6020020181815250507fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb58160016020811061013157fe5b6020020181815250507fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d308160026020811061016857fe5b6020020181815250507f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba858160036020811061019f57fe5b6020020181815250507fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344816004602081106101d657fe5b6020020181815250507f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d8160056020811061020d57fe5b6020020181815250507f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a19688160066020811061024457fe5b6020020181815250507fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f838160076020811061027b57fe5b6020020181815250507f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af816008602081106102b257fe5b6020020181815250507fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0816009602081106102e957fe5b6020020181815250507ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a581600a6020811061032057fe5b6020020181815250507ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf89281600b6020811061035757fe5b6020020181815250507f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c81600c6020811061038e57fe5b6020020181815250507fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb81600d602081106103c557fe5b6020020181815250507f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc81600e602081106103fc57fe5b6020020181815250507fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d281600f6020811061043357fe5b6020020181815250507f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f8160106020811061046a57fe5b6020020181815250507fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a816011602081106104a157fe5b6020020181815250507f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0816012602081106104d857fe5b6020020181815250507fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa08160136020811061050f57fe5b6020020181815250507fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e28160146020811061054657fe5b6020020181815250507ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd98160156020811061057d57fe5b6020020181815250507f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377816016602081106105b457fe5b6020020181815250507f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652816017602081106105eb57fe5b6020020181815250507fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef8160186020811061062257fe5b6020020181815250507f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d8160196020811061065957fe5b6020020181815250507fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d081601a6020811061069057fe5b6020020181815250507f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e81601b602081106106c757fe5b6020020181815250507f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e81601c602081106106fe57fe5b6020020181815250507f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea32281601d6020811061073557fe5b6020020181815250507f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d73581601e6020811061076c57fe5b6020020181815250507f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a981601f602081106107a357fe5b60200201818152505090565b6000808360200154905060005b602081101561087557600060018284901c16905060008660000183602081106107e157fe5b0154905060018214156108245780856040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209450610866565b8486846020811061083157fe5b602002015160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012094505b505080806001019150506107bc565b505092915050565b60405180610400016040528060209060208202803683378082019150509050509056fea2646970667358221220fe4c4bc6aacdf8b73abe932670970fe960af23ec6a22b7142a5cd5a946f9638264736f6c63430007060033";

export class MerkleTreeManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleTreeManager> {
    return super.deploy(overrides || {}) as Promise<MerkleTreeManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleTreeManager {
    return super.attach(address) as MerkleTreeManager;
  }
  connect(signer: Signer): MerkleTreeManager__factory {
    return super.connect(signer) as MerkleTreeManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeManagerInterface {
    return new utils.Interface(_abi) as MerkleTreeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTreeManager {
    return new Contract(address, _abi, signerOrProvider) as MerkleTreeManager;
  }
}
