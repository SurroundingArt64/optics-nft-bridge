{
  "address": "0x41b93B9CDD2B8Dd96d9B60d3733a12150Cf18c31",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_localDomain",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_processGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveGas",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oldRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[2]",
          "name": "newRoot",
          "type": "bytes32[2]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature2",
          "type": "bytes"
        }
      ],
      "name": "DoubleUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "Process",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "homeDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "oldRoot",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "Update",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PROCESS_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESERVE_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "acceptableRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "committedRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "confirmAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_oldRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[2]",
          "name": "_newRoot",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature2",
          "type": "bytes"
        }
      ],
      "name": "doubleUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeDomainHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_remoteDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_updater",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_committedRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_optimisticSeconds",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "messages",
      "outputs": [
        {
          "internalType": "enum Replica.MessageStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optimisticSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "process",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[32]",
          "name": "_proof",
          "type": "bytes32[32]"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "prove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[32]",
          "name": "_proof",
          "type": "bytes32[32]"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "proveAndProcess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remoteDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum Common.States",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_oldRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a060693604ba950965623c62cf0b66c81246bc6c70fe92bb136fa0f3d928420",
  "receipt": {
    "to": null,
    "from": "0xFC77079c043B39A64eE9fa70863f25C9A0381D08",
    "contractAddress": "0x41b93B9CDD2B8Dd96d9B60d3733a12150Cf18c31",
    "transactionIndex": 1,
    "gasUsed": "2379216",
    "logsBloom": "0x
    "blockHash": "0x4e15e363bd3563b8ba3c4f2839180957845e42602f6adc38d2051bd43c58977d",
    "transactionHash": "0x1a060693604ba950965623c62cf0b66c81246bc6c70fe92bb136fa0f3d928420",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24197293,
        "transactionHash": "0x1a060693604ba950965623c62cf0b66c81246bc6c70fe92bb136fa0f3d928420",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fc77079c043b39a64ee9fa70863f25c9a0381d08",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001521b5fa2ce180000000000000000000000000000000000000000000000000147c7c36c244150000000000000000000000000000000000000000000000053c81c35a672abe126e00000000000000000000000000000000000000000000000014675a80c817338000000000000000000000000000000000000000000000053c81d87c1d24eaf3ee",
        "logIndex": 1,
        "blockHash": "0x4e15e363bd3563b8ba3c4f2839180957845e42602f6adc38d2051bd43c58977d"
      }
    ],
    "blockNumber": 24197293,
    "cumulativeGasUsed": "2894366",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000",
    1000000,
    80000
  ],
  "numDeployments": 1,
  "solcInputHash": "7354dfe7d822b8255d41f920f8763a5d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_localDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_processGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveGas\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[2]\",\"name\":\"newRoot\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature2\",\"type\":\"bytes\"}],\"name\":\"DoubleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Process\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"homeDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oldRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROCESS_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"acceptableRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committedRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"confirmAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_oldRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[2]\",\"name\":\"_newRoot\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature2\",\"type\":\"bytes\"}],\"name\":\"doubleUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeDomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_remoteDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_committedRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_optimisticSeconds\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"enum Replica.MessageStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"process\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[32]\",\"name\":\"_proof\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"prove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[32]\",\"name\":\"_proof\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"proveAndProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remoteDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Common.States\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_oldRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Celo Labs Inc.\",\"events\":{\"Process(bytes32,bool,bytes)\":{\"params\":{\"messageHash\":\"Hash of message that failed to process\",\"returnData\":\"the return data from the external call\",\"success\":\"TRUE if the call was executed successfully, FALSE if the call reverted\"}}},\"kind\":\"dev\",\"methods\":{\"acceptableRoot(bytes32)\":{\"params\":{\"_root\":\"the Merkle root, submitted in an update, to check\"},\"returns\":{\"_0\":\"TRUE iff root has been submitted & timeout has expired\"}},\"doubleUpdate(bytes32,bytes32[2],bytes,bytes)\":{\"details\":\"When `fail()` is called on Home, updater is slashed.\",\"params\":{\"_newRoot\":\"Array containing two conflicting new roots\",\"_oldRoot\":\"Old root shared between two conflicting updates\",\"_signature\":\"Signature on `_oldRoot` and `_newRoot`[0]\",\"_signature2\":\"Signature on `_oldRoot` and `_newRoot`[1]\"}},\"process(bytes)\":{\"details\":\"Recipient must implement a `handle` method (refer to IMessageRecipient.sol) Reverts if formatted message's destination domain is not the Replica's domain, if message has not been proven, or if not enough gas is provided for the dispatch transaction.\",\"params\":{\"_message\":\"Formatted message\"},\"returns\":{\"_success\":\"TRUE iff dispatch transaction succeeded\"}},\"prove(bytes32,bytes32[32],uint256)\":{\"details\":\"Reverts if message's MessageStatus != None (i.e. if message was already proven or processed)For convenience, we allow proving against any previous root. This means that witnesses never need to be updated for the new root\",\"params\":{\"_index\":\"Index of leaf in home's merkle tree\",\"_leaf\":\"Leaf of message to prove\",\"_proof\":\"Merkle proof of inclusion for leaf\"},\"returns\":{\"_0\":\"Returns true if proof was valid and `prove` call succeeded*\"}},\"proveAndProcess(bytes,bytes32[32],uint256)\":{\"details\":\"Reverts if `prove` call returns false\",\"params\":{\"_index\":\"Index of leaf in home's merkle tree\",\"_message\":\"Formatted message (refer to Common.sol Message library)\",\"_proof\":\"Merkle proof of inclusion for message's leaf\"}},\"update(bytes32,bytes32,bytes)\":{\"details\":\"Reverts if update doesn't build off latest committedRoot or if signature is invalid.\",\"params\":{\"_newRoot\":\"New merkle root\",\"_oldRoot\":\"Old merkle root\",\"_signature\":\"Updater's signature on `_oldRoot` and `_newRoot`\"}}},\"title\":\"Replica\",\"version\":1},\"userdoc\":{\"events\":{\"DoubleUpdate(bytes32,bytes32[2],bytes,bytes)\":{\"notice\":\"Emitted when proof of a double update is submitted, which sets the contract to FAILED state\"},\"Process(bytes32,bool,bytes)\":{\"notice\":\"Emitted when message is processed\"},\"Update(uint32,bytes32,bytes32,bytes)\":{\"notice\":\"Emitted when update is made on Home or unconfirmed update root is submitted on Replica\"}},\"kind\":\"user\",\"methods\":{\"acceptableRoot(bytes32)\":{\"notice\":\"Check that the root has been submitted and that the optimistic timeout period has expired, meaning the root can be processed\"},\"doubleUpdate(bytes32,bytes32[2],bytes,bytes)\":{\"notice\":\"Called by external agent. Checks that signatures on two sets of roots are valid and that the new roots conflict with each other. If both cases hold true, the contract is failed and a `DoubleUpdate` event is emitted.\"},\"homeDomainHash()\":{\"notice\":\"Hash of Home domain concatenated with \\\"OPTICS\\\"\"},\"process(bytes)\":{\"notice\":\"Given formatted message, attempts to dispatch message payload to end recipient.\"},\"prove(bytes32,bytes32[32],uint256)\":{\"notice\":\"Attempts to prove the validity of message given its leaf, the merkle proof of inclusion for the leaf, and the index of the leaf.\"},\"proveAndProcess(bytes,bytes32[32],uint256)\":{\"notice\":\"First attempts to prove the validity of provided formatted `message`. If the message is successfully proven, then tries to process message.\"},\"update(bytes32,bytes32,bytes)\":{\"notice\":\"Called by external agent. Submits the signed update's new root, marks root's allowable confirmation time, and emits an `Update` event.\"}},\"notice\":\"Track root updates on Home, prove and dispatch messages to end recipients.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@celo-org/optics-sol/contracts/Replica.sol\":\"Replica\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@celo-org/optics-sol/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Message} from \\\"../libs/Message.sol\\\";\\n// ============ External Imports ============\\nimport {ECDSA} from \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @title Common\\n * @author Celo Labs Inc.\\n * @notice Shared utilities between Home and Replica.\\n */\\nabstract contract Common is Initializable {\\n    // ============ Enums ============\\n\\n    // States:\\n    //   0 - UnInitialized - before initialize function is called\\n    //   note: the contract is initialized at deploy time, so it should never be in this state\\n    //   1 - Active - as long as the contract has not become fraudulent\\n    //   2 - Failed - after a valid fraud proof has been submitted;\\n    //   contract will no longer accept updates or new messages\\n    enum States {\\n        UnInitialized,\\n        Active,\\n        Failed\\n    }\\n\\n    // ============ Immutable Variables ============\\n\\n    // Domain of chain on which the contract is deployed\\n    uint32 public immutable localDomain;\\n\\n    // ============ Public Variables ============\\n\\n    // Address of bonded Updater\\n    address public updater;\\n    // Current state of contract\\n    States public state;\\n    // The latest root that has been signed by the Updater\\n    bytes32 public committedRoot;\\n\\n    // ============ Upgrade Gap ============\\n\\n    // gap for upgrade safety\\n    uint256[47] private __GAP;\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice Emitted when update is made on Home\\n     * or unconfirmed update root is submitted on Replica\\n     * @param homeDomain Domain of home contract\\n     * @param oldRoot Old merkle root\\n     * @param newRoot New merkle root\\n     * @param signature Updater's signature on `oldRoot` and `newRoot`\\n     */\\n    event Update(\\n        uint32 indexed homeDomain,\\n        bytes32 indexed oldRoot,\\n        bytes32 indexed newRoot,\\n        bytes signature\\n    );\\n\\n    /**\\n     * @notice Emitted when proof of a double update is submitted,\\n     * which sets the contract to FAILED state\\n     * @param oldRoot Old root shared between two conflicting updates\\n     * @param newRoot Array containing two conflicting new roots\\n     * @param signature Signature on `oldRoot` and `newRoot`[0]\\n     * @param signature2 Signature on `oldRoot` and `newRoot`[1]\\n     */\\n    event DoubleUpdate(\\n        bytes32 oldRoot,\\n        bytes32[2] newRoot,\\n        bytes signature,\\n        bytes signature2\\n    );\\n\\n    // ============ Modifiers ============\\n\\n    /**\\n     * @notice Ensures that contract state != FAILED when the function is called\\n     */\\n    modifier notFailed() {\\n        require(state != States.Failed, \\\"failed state\\\");\\n        _;\\n    }\\n\\n    // ============ Constructor ============\\n\\n    constructor(uint32 _localDomain) {\\n        localDomain = _localDomain;\\n    }\\n\\n    // ============ Initializer ============\\n\\n    function __Common_initialize(address _updater) internal initializer {\\n        updater = _updater;\\n        state = States.Active;\\n    }\\n\\n    // ============ External Functions ============\\n\\n    /**\\n     * @notice Called by external agent. Checks that signatures on two sets of\\n     * roots are valid and that the new roots conflict with each other. If both\\n     * cases hold true, the contract is failed and a `DoubleUpdate` event is\\n     * emitted.\\n     * @dev When `fail()` is called on Home, updater is slashed.\\n     * @param _oldRoot Old root shared between two conflicting updates\\n     * @param _newRoot Array containing two conflicting new roots\\n     * @param _signature Signature on `_oldRoot` and `_newRoot`[0]\\n     * @param _signature2 Signature on `_oldRoot` and `_newRoot`[1]\\n     */\\n    function doubleUpdate(\\n        bytes32 _oldRoot,\\n        bytes32[2] calldata _newRoot,\\n        bytes calldata _signature,\\n        bytes calldata _signature2\\n    ) external notFailed {\\n        if (\\n            Common._isUpdaterSignature(_oldRoot, _newRoot[0], _signature) &&\\n            Common._isUpdaterSignature(_oldRoot, _newRoot[1], _signature2) &&\\n            _newRoot[0] != _newRoot[1]\\n        ) {\\n            _fail();\\n            emit DoubleUpdate(_oldRoot, _newRoot, _signature, _signature2);\\n        }\\n    }\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * @notice Hash of Home domain concatenated with \\\"OPTICS\\\"\\n     */\\n    function homeDomainHash() public view virtual returns (bytes32);\\n\\n    // ============ Internal Functions ============\\n\\n    /**\\n     * @notice Hash of Home domain concatenated with \\\"OPTICS\\\"\\n     * @param _homeDomain the Home domain to hash\\n     */\\n    function _homeDomainHash(uint32 _homeDomain)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(_homeDomain, \\\"OPTICS\\\"));\\n    }\\n\\n    /**\\n     * @notice Set contract state to FAILED\\n     * @dev Called when a valid fraud proof is submitted\\n     */\\n    function _setFailed() internal {\\n        state = States.Failed;\\n    }\\n\\n    /**\\n     * @notice Moves the contract into failed state\\n     * @dev Called when fraud is proven\\n     * (Double Update is submitted on Home or Replica,\\n     * or Improper Update is submitted on Home)\\n     */\\n    function _fail() internal virtual;\\n\\n    /**\\n     * @notice Checks that signature was signed by Updater\\n     * @param _oldRoot Old merkle root\\n     * @param _newRoot New merkle root\\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\\n     * @return TRUE iff signature is valid signed by updater\\n     **/\\n    function _isUpdaterSignature(\\n        bytes32 _oldRoot,\\n        bytes32 _newRoot,\\n        bytes memory _signature\\n    ) internal view returns (bool) {\\n        bytes32 _digest = keccak256(\\n            abi.encodePacked(homeDomainHash(), _oldRoot, _newRoot)\\n        );\\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\\n        return (ECDSA.recover(_digest, _signature) == updater);\\n    }\\n}\\n\",\"keccak256\":\"0x869e5442f6a6b2a89999e9cdbf4956dcfcf181bc09b92925092403b6520d852d\",\"license\":\"MIT OR Apache-2.0\"},\"@celo-org/optics-sol/contracts/Replica.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Version0} from \\\"./Version0.sol\\\";\\nimport {Common} from \\\"./Common.sol\\\";\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\nimport {Message} from \\\"../libs/Message.sol\\\";\\nimport {IMessageRecipient} from \\\"../interfaces/IMessageRecipient.sol\\\";\\n// ============ External Imports ============\\nimport {TypedMemView} from \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\n\\n/**\\n * @title Replica\\n * @author Celo Labs Inc.\\n * @notice Track root updates on Home,\\n * prove and dispatch messages to end recipients.\\n */\\ncontract Replica is Version0, Common {\\n    // ============ Libraries ============\\n\\n    using MerkleLib for MerkleLib.Tree;\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using Message for bytes29;\\n\\n    // ============ Enums ============\\n\\n    // Status of Message:\\n    //   0 - None - message has not been proven or processed\\n    //   1 - Proven - message inclusion proof has been validated\\n    //   2 - Processed - message has been dispatched to recipient\\n    enum MessageStatus {\\n        None,\\n        Proven,\\n        Processed\\n    }\\n\\n    // ============ Immutables ============\\n\\n    // Minimum gas for message processing\\n    uint256 public immutable PROCESS_GAS;\\n    // Reserved gas (to ensure tx completes in case message processing runs out)\\n    uint256 public immutable RESERVE_GAS;\\n\\n    // ============ Public Storage ============\\n\\n    // Domain of home chain\\n    uint32 public remoteDomain;\\n    // Number of seconds to wait before root becomes confirmable\\n    uint256 public optimisticSeconds;\\n    // re-entrancy guard\\n    uint8 private entered;\\n    // Mapping of roots to allowable confirmation times\\n    mapping(bytes32 => uint256) public confirmAt;\\n    // Mapping of message leaves to MessageStatus\\n    mapping(bytes32 => MessageStatus) public messages;\\n\\n    // ============ Upgrade Gap ============\\n\\n    // gap for upgrade safety\\n    uint256[44] private __GAP;\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice Emitted when message is processed\\n     * @param messageHash Hash of message that failed to process\\n     * @param success TRUE if the call was executed successfully, FALSE if the call reverted\\n     * @param returnData the return data from the external call\\n     */\\n    event Process(\\n        bytes32 indexed messageHash,\\n        bool indexed success,\\n        bytes indexed returnData\\n    );\\n\\n    // ============ Constructor ============\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(\\n        uint32 _localDomain,\\n        uint256 _processGas,\\n        uint256 _reserveGas\\n    ) Common(_localDomain) {\\n        require(_processGas >= 850_000, \\\"!process gas\\\");\\n        require(_reserveGas >= 15_000, \\\"!reserve gas\\\");\\n        PROCESS_GAS = _processGas;\\n        RESERVE_GAS = _reserveGas;\\n    }\\n\\n    // ============ Initializer ============\\n\\n    function initialize(\\n        uint32 _remoteDomain,\\n        address _updater,\\n        bytes32 _committedRoot,\\n        uint256 _optimisticSeconds\\n    ) public initializer {\\n        __Common_initialize(_updater);\\n        entered = 1;\\n        remoteDomain = _remoteDomain;\\n        committedRoot = _committedRoot;\\n        confirmAt[_committedRoot] = 1;\\n        optimisticSeconds = _optimisticSeconds;\\n    }\\n\\n    // ============ External Functions ============\\n\\n    /**\\n     * @notice Called by external agent. Submits the signed update's new root,\\n     * marks root's allowable confirmation time, and emits an `Update` event.\\n     * @dev Reverts if update doesn't build off latest committedRoot\\n     * or if signature is invalid.\\n     * @param _oldRoot Old merkle root\\n     * @param _newRoot New merkle root\\n     * @param _signature Updater's signature on `_oldRoot` and `_newRoot`\\n     */\\n    function update(\\n        bytes32 _oldRoot,\\n        bytes32 _newRoot,\\n        bytes memory _signature\\n    ) external notFailed {\\n        // ensure that update is building off the last submitted root\\n        require(_oldRoot == committedRoot, \\\"not current update\\\");\\n        // validate updater signature\\n        require(\\n            _isUpdaterSignature(_oldRoot, _newRoot, _signature),\\n            \\\"!updater sig\\\"\\n        );\\n        // Hook for future use\\n        _beforeUpdate();\\n        // set the new root's confirmation timer\\n        confirmAt[_newRoot] = block.timestamp + optimisticSeconds;\\n        // update committedRoot\\n        committedRoot = _newRoot;\\n        emit Update(remoteDomain, _oldRoot, _newRoot, _signature);\\n    }\\n\\n    /**\\n     * @notice First attempts to prove the validity of provided formatted\\n     * `message`. If the message is successfully proven, then tries to process\\n     * message.\\n     * @dev Reverts if `prove` call returns false\\n     * @param _message Formatted message (refer to Common.sol Message library)\\n     * @param _proof Merkle proof of inclusion for message's leaf\\n     * @param _index Index of leaf in home's merkle tree\\n     */\\n    function proveAndProcess(\\n        bytes memory _message,\\n        bytes32[32] calldata _proof,\\n        uint256 _index\\n    ) external {\\n        require(prove(keccak256(_message), _proof, _index), \\\"!prove\\\");\\n        process(_message);\\n    }\\n\\n    /**\\n     * @notice Given formatted message, attempts to dispatch\\n     * message payload to end recipient.\\n     * @dev Recipient must implement a `handle` method (refer to IMessageRecipient.sol)\\n     * Reverts if formatted message's destination domain is not the Replica's domain,\\n     * if message has not been proven,\\n     * or if not enough gas is provided for the dispatch transaction.\\n     * @param _message Formatted message\\n     * @return _success TRUE iff dispatch transaction succeeded\\n     */\\n    function process(bytes memory _message) public returns (bool _success) {\\n        bytes29 _m = _message.ref(0);\\n        // ensure message was meant for this domain\\n        require(_m.destination() == localDomain, \\\"!destination\\\");\\n        // ensure message has been proven\\n        bytes32 _messageHash = _m.keccak();\\n        require(messages[_messageHash] == MessageStatus.Proven, \\\"!proven\\\");\\n        // check re-entrancy guard\\n        require(entered == 1, \\\"!reentrant\\\");\\n        entered = 0;\\n        // update message status as processed\\n        messages[_messageHash] = MessageStatus.Processed;\\n        // A call running out of gas TYPICALLY errors the whole tx. We want to\\n        // a) ensure the call has a sufficient amount of gas to make a\\n        //    meaningful state change.\\n        // b) ensure that if the subcall runs out of gas, that the tx as a whole\\n        //    does not revert (i.e. we still mark the message processed)\\n        // To do this, we require that we have enough gas to process\\n        // and still return. We then delegate only the minimum processing gas.\\n        require(gasleft() >= PROCESS_GAS + RESERVE_GAS, \\\"!gas\\\");\\n        // get the message recipient\\n        address _recipient = _m.recipientAddress();\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        uint256 _maxCopy = 256;\\n        uint256 _gas = PROCESS_GAS;\\n        // allocate memory for returndata\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        bytes memory _calldata = abi.encodeWithSignature(\\n            \\\"handle(uint32,bytes32,bytes)\\\",\\n            _m.origin(),\\n            _m.sender(),\\n            _m.body().clone()\\n        );\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _recipient, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        // emit process results\\n        emit Process(_messageHash, _success, _returnData);\\n        // reset re-entrancy guard\\n        entered = 1;\\n    }\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * @notice Check that the root has been submitted\\n     * and that the optimistic timeout period has expired,\\n     * meaning the root can be processed\\n     * @param _root the Merkle root, submitted in an update, to check\\n     * @return TRUE iff root has been submitted & timeout has expired\\n     */\\n    function acceptableRoot(bytes32 _root) public view returns (bool) {\\n        uint256 _time = confirmAt[_root];\\n        if (_time == 0) {\\n            return false;\\n        }\\n        return block.timestamp >= _time;\\n    }\\n\\n    /**\\n     * @notice Attempts to prove the validity of message given its leaf, the\\n     * merkle proof of inclusion for the leaf, and the index of the leaf.\\n     * @dev Reverts if message's MessageStatus != None (i.e. if message was\\n     * already proven or processed)\\n     * @dev For convenience, we allow proving against any previous root.\\n     * This means that witnesses never need to be updated for the new root\\n     * @param _leaf Leaf of message to prove\\n     * @param _proof Merkle proof of inclusion for leaf\\n     * @param _index Index of leaf in home's merkle tree\\n     * @return Returns true if proof was valid and `prove` call succeeded\\n     **/\\n    function prove(\\n        bytes32 _leaf,\\n        bytes32[32] calldata _proof,\\n        uint256 _index\\n    ) public returns (bool) {\\n        // ensure that message has not been proven or processed\\n        require(messages[_leaf] == MessageStatus.None, \\\"!MessageStatus.None\\\");\\n        // calculate the expected root based on the proof\\n        bytes32 _calculatedRoot = MerkleLib.branchRoot(_leaf, _proof, _index);\\n        // if the root is valid, change status to Proven\\n        if (acceptableRoot(_calculatedRoot)) {\\n            messages[_leaf] = MessageStatus.Proven;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Hash of Home domain concatenated with \\\"OPTICS\\\"\\n     */\\n    function homeDomainHash() public view override returns (bytes32) {\\n        return _homeDomainHash(remoteDomain);\\n    }\\n\\n    // ============ Internal Functions ============\\n\\n    /**\\n     * @notice Moves the contract into failed state\\n     * @dev Called when a Double Update is submitted\\n     */\\n    function _fail() internal override {\\n        _setFailed();\\n    }\\n\\n    /// @notice Hook for potential future use\\n    // solhint-disable-next-line no-empty-blocks\\n    function _beforeUpdate() internal {}\\n}\\n\",\"keccak256\":\"0x7c57c7a286875344dd5ab751505f0aeb9c3eb3ced3962ff9d1e2b1b94a5dff1e\",\"license\":\"MIT OR Apache-2.0\"},\"@celo-org/optics-sol/contracts/Version0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title Version0\\n * @notice Version getter for contracts\\n **/\\ncontract Version0 {\\n    uint8 public constant VERSION = 0;\\n}\\n\",\"keccak256\":\"0x9810d04af4f89425dd864a5e7582d2f2be9e83269c79b9b0047f178cb720304c\",\"license\":\"MIT OR Apache-2.0\"},\"@celo-org/optics-sol/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMessageRecipient {\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes memory _message\\n    ) external;\\n}\\n\",\"keccak256\":\"0x61d7ee1e06d010d44980022aa43d8eb1fee661734ac94698245de87a41fde352\",\"license\":\"MIT OR Apache-2.0\"},\"@celo-org/optics-sol/libs/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// work based on eth2 deposit contract, which is used under CC0-1.0\\n\\n/**\\n * @title MerkleLib\\n * @author Celo Labs Inc.\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\n **/\\nlibrary MerkleLib {\\n    uint256 internal constant TREE_DEPTH = 32;\\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\n\\n    /**\\n     * @notice Struct representing incremental merkle tree. Contains current\\n     * branch and the number of inserted leaves in the tree.\\n     **/\\n    struct Tree {\\n        bytes32[TREE_DEPTH] branch;\\n        uint256 count;\\n    }\\n\\n    /**\\n     * @notice Inserts `_node` into merkle tree\\n     * @dev Reverts if tree is full\\n     * @param _node Element to insert into tree\\n     **/\\n    function insert(Tree storage _tree, bytes32 _node) internal {\\n        require(_tree.count < MAX_LEAVES, \\\"merkle tree full\\\");\\n\\n        _tree.count += 1;\\n        uint256 size = _tree.count;\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n            if ((size & 1) == 1) {\\n                _tree.branch[i] = _node;\\n                return;\\n            }\\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\\n            size /= 2;\\n        }\\n        // As the loop should always end prematurely with the `return` statement,\\n        // this code should be unreachable. We assert `false` just to be safe.\\n        assert(false);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns`_tree`'s current root given array of zero\\n     * hashes\\n     * @param _zeroes Array of zero hashes\\n     * @return _current Calculated root of `_tree`\\n     **/\\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\\n        internal\\n        view\\n        returns (bytes32 _current)\\n    {\\n        uint256 _index = _tree.count;\\n\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n            uint256 _ithBit = (_index >> i) & 0x01;\\n            bytes32 _next = _tree.branch[i];\\n            if (_ithBit == 1) {\\n                _current = keccak256(abi.encodePacked(_next, _current));\\n            } else {\\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates and returns`_tree`'s current root\\n    function root(Tree storage _tree) internal view returns (bytes32) {\\n        return rootWithCtx(_tree, zeroHashes());\\n    }\\n\\n    /// @notice Returns array of TREE_DEPTH zero hashes\\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\\n    function zeroHashes()\\n        internal\\n        pure\\n        returns (bytes32[TREE_DEPTH] memory _zeroes)\\n    {\\n        _zeroes[0] = Z_0;\\n        _zeroes[1] = Z_1;\\n        _zeroes[2] = Z_2;\\n        _zeroes[3] = Z_3;\\n        _zeroes[4] = Z_4;\\n        _zeroes[5] = Z_5;\\n        _zeroes[6] = Z_6;\\n        _zeroes[7] = Z_7;\\n        _zeroes[8] = Z_8;\\n        _zeroes[9] = Z_9;\\n        _zeroes[10] = Z_10;\\n        _zeroes[11] = Z_11;\\n        _zeroes[12] = Z_12;\\n        _zeroes[13] = Z_13;\\n        _zeroes[14] = Z_14;\\n        _zeroes[15] = Z_15;\\n        _zeroes[16] = Z_16;\\n        _zeroes[17] = Z_17;\\n        _zeroes[18] = Z_18;\\n        _zeroes[19] = Z_19;\\n        _zeroes[20] = Z_20;\\n        _zeroes[21] = Z_21;\\n        _zeroes[22] = Z_22;\\n        _zeroes[23] = Z_23;\\n        _zeroes[24] = Z_24;\\n        _zeroes[25] = Z_25;\\n        _zeroes[26] = Z_26;\\n        _zeroes[27] = Z_27;\\n        _zeroes[28] = Z_28;\\n        _zeroes[29] = Z_29;\\n        _zeroes[30] = Z_30;\\n        _zeroes[31] = Z_31;\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the merkle root for the given leaf\\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\\n     * @param _item Merkle leaf\\n     * @param _branch Merkle proof\\n     * @param _index Index of `_item` in tree\\n     * @return _current Calculated merkle root\\n     **/\\n    function branchRoot(\\n        bytes32 _item,\\n        bytes32[TREE_DEPTH] memory _branch,\\n        uint256 _index\\n    ) internal pure returns (bytes32 _current) {\\n        _current = _item;\\n\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n            uint256 _ithBit = (_index >> i) & 0x01;\\n            bytes32 _next = _branch[i];\\n            if (_ithBit == 1) {\\n                _current = keccak256(abi.encodePacked(_next, _current));\\n            } else {\\n                _current = keccak256(abi.encodePacked(_current, _next));\\n            }\\n        }\\n    }\\n\\n    // keccak256 zero hashes\\n    bytes32 internal constant Z_0 =\\n        hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n    bytes32 internal constant Z_1 =\\n        hex\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\";\\n    bytes32 internal constant Z_2 =\\n        hex\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\";\\n    bytes32 internal constant Z_3 =\\n        hex\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\";\\n    bytes32 internal constant Z_4 =\\n        hex\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\";\\n    bytes32 internal constant Z_5 =\\n        hex\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\";\\n    bytes32 internal constant Z_6 =\\n        hex\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\";\\n    bytes32 internal constant Z_7 =\\n        hex\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\";\\n    bytes32 internal constant Z_8 =\\n        hex\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\";\\n    bytes32 internal constant Z_9 =\\n        hex\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\";\\n    bytes32 internal constant Z_10 =\\n        hex\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\";\\n    bytes32 internal constant Z_11 =\\n        hex\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\";\\n    bytes32 internal constant Z_12 =\\n        hex\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\";\\n    bytes32 internal constant Z_13 =\\n        hex\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\";\\n    bytes32 internal constant Z_14 =\\n        hex\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\";\\n    bytes32 internal constant Z_15 =\\n        hex\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\";\\n    bytes32 internal constant Z_16 =\\n        hex\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\";\\n    bytes32 internal constant Z_17 =\\n        hex\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\";\\n    bytes32 internal constant Z_18 =\\n        hex\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\";\\n    bytes32 internal constant Z_19 =\\n        hex\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\";\\n    bytes32 internal constant Z_20 =\\n        hex\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\";\\n    bytes32 internal constant Z_21 =\\n        hex\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\";\\n    bytes32 internal constant Z_22 =\\n        hex\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\";\\n    bytes32 internal constant Z_23 =\\n        hex\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\";\\n    bytes32 internal constant Z_24 =\\n        hex\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\";\\n    bytes32 internal constant Z_25 =\\n        hex\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\";\\n    bytes32 internal constant Z_26 =\\n        hex\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\";\\n    bytes32 internal constant Z_27 =\\n        hex\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\";\\n    bytes32 internal constant Z_28 =\\n        hex\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\";\\n    bytes32 internal constant Z_29 =\\n        hex\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\";\\n    bytes32 internal constant Z_30 =\\n        hex\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\";\\n    bytes32 internal constant Z_31 =\\n        hex\\\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\\\";\\n}\\n\",\"keccak256\":\"0xc0dd777eeec6a46c67f35f6048b5bcae0e4f2d81988ca391e3ce4e68bbed07ad\",\"license\":\"MIT OR Apache-2.0\"},\"@celo-org/optics-sol/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nimport \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\n\\nimport {\\n    TypeCasts\\n} from \\\"./TypeCasts.sol\\\";\\n\\n/**\\n * @title Message Library\\n * @author Celo Labs Inc.\\n * @notice Library for formatted messages used by Home and Replica.\\n **/\\nlibrary Message {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // Number of bytes in formatted message before `body` field\\n    uint256 internal constant PREFIX_LENGTH = 76;\\n\\n    /**\\n     * @notice Returns formatted (packed) message with provided fields\\n     * @param _originDomain Domain of home chain\\n     * @param _sender Address of sender as bytes32\\n     * @param _nonce Destination-specific nonce\\n     * @param _destinationDomain Domain of destination chain\\n     * @param _recipient Address of recipient on destination chain as bytes32\\n     * @param _messageBody Raw bytes of message body\\n     * @return Formatted message\\n     **/\\n    function formatMessage(\\n        uint32 _originDomain,\\n        bytes32 _sender,\\n        uint32 _nonce,\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        bytes memory _messageBody\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _originDomain,\\n                _sender,\\n                _nonce,\\n                _destinationDomain,\\n                _recipient,\\n                _messageBody\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns leaf of formatted message with provided fields.\\n     * @param _origin Domain of home chain\\n     * @param _sender Address of sender as bytes32\\n     * @param _nonce Destination-specific nonce number\\n     * @param _destination Domain of destination chain\\n     * @param _recipient Address of recipient on destination chain as bytes32\\n     * @param _body Raw bytes of message body\\n     * @return Leaf (hash) of formatted message\\n     **/\\n    function messageHash(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        uint32 _nonce,\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        bytes memory _body\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                formatMessage(\\n                    _origin,\\n                    _sender,\\n                    _nonce,\\n                    _destination,\\n                    _recipient,\\n                    _body\\n                )\\n            );\\n    }\\n\\n    /// @notice Returns message's origin field\\n    function origin(bytes29 _message) internal pure returns (uint32) {\\n        return uint32(_message.indexUint(0, 4));\\n    }\\n\\n    /// @notice Returns message's sender field\\n    function sender(bytes29 _message) internal pure returns (bytes32) {\\n        return _message.index(4, 32);\\n    }\\n\\n    /// @notice Returns message's nonce field\\n    function nonce(bytes29 _message) internal pure returns (uint32) {\\n        return uint32(_message.indexUint(36, 4));\\n    }\\n\\n    /// @notice Returns message's destination field\\n    function destination(bytes29 _message) internal pure returns (uint32) {\\n        return uint32(_message.indexUint(40, 4));\\n    }\\n\\n    /// @notice Returns message's recipient field as bytes32\\n    function recipient(bytes29 _message) internal pure returns (bytes32) {\\n        return _message.index(44, 32);\\n    }\\n\\n    /// @notice Returns message's recipient field as an address\\n    function recipientAddress(bytes29 _message)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return TypeCasts.bytes32ToAddress(recipient(_message));\\n    }\\n\\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\\n    function body(bytes29 _message) internal pure returns (bytes29) {\\n        return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);\\n    }\\n\\n    function leaf(bytes29 _message) internal view returns (bytes32) {\\n        return messageHash(origin(_message), sender(_message), nonce(_message), destination(_message), recipient(_message), TypedMemView.clone(body(_message)));\\n    }\\n}\\n\",\"keccak256\":\"0xad9b9a5222e3422b978fb202f9aa362d92fffcad819915dac29321fd159433c3\",\"license\":\"MIT OR Apache-2.0\"},\"@celo-org/optics-sol/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nimport \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    function coerceBytes32(string memory _s)\\n        internal\\n        pure\\n        returns (bytes32 _b)\\n    {\\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\n    }\\n\\n    // treat it as a null-terminated string of max 32 bytes\\n    function coerceString(bytes32 _buf)\\n        internal\\n        pure\\n        returns (string memory _newStr)\\n    {\\n        uint8 _slen = 0;\\n        while (_slen < 32 && _buf[_slen] != 0) {\\n            _slen++;\\n        }\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _newStr := mload(0x40)\\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\n            mstore(_newStr, _slen)\\n            mstore(add(_newStr, 0x20), _buf)\\n        }\\n    }\\n\\n    // alignment preserving cast\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    // alignment preserving cast\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n        return address(uint160(uint256(_buf)));\\n    }\\n}\\n\",\"keccak256\":\"0x134f734cdf70f8f6c897dcf9b1062b0442f3cad71536c8a3eef7d2492da3af3f\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x94c4719c16ffb96dd3cdc68f6fbf78105153018adbf382241821e8188e6a4bd5\",\"license\":\"MIT\"},\"@summa-tx/memview-sol/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.10;\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016 Smart Contract Solutions, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        c = _a * _b;\\n        require(c / _a == _b, \\\"Overflow during multiplication.\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n        return _a / _b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, \\\"Underflow during subtraction.\\\");\\n        return _a - _b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        c = _a + _b;\\n        require(c >= _a, \\\"Overflow during addition.\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xa1054a453f13c3c817cd2d9fb048d68b20202a6f925d2efe6c887bddf3752837\",\"license\":\"MIT\"},\"@summa-tx/memview-sol/contracts/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.5.10;\\n\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\nlibrary TypedMemView {\\n    using SafeMath for uint256;\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255 ; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            second |= byteHex(_byte);\\n            if (i != 0) {\\n                second <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        // ugly. redo without assembly?\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n                sub(_len, 1),\\n                0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc.add(_len);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower 24 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return uint256(len(memView)).add(32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc.add(_index).add(_len) > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc.add(_index);\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index.add(_bytes) > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        uint8 bitLength = _bytes * 8;\\n        uint256 _loc = loc(memView);\\n        uint256 _mask = leftMask(bitLength);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            result := and(mload(add(_loc, _index)), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n            // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n            // use the identity precompile to copy\\n            // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // store the legnth\\n            mstore(ptr, _written)\\n            // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e465d5892bf9132432695a1fae4d8814615841cf2b3a80fc2027177b54b3b8b\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051612bf2380380612bf28339818101604052606081101561003357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050828063ffffffff1660808163ffffffff1660e01b8152505050620cf8508210156100ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f2170726f6365737320676173000000000000000000000000000000000000000081525060200191505060405180910390fd5b613a98811015610162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f217265736572766520676173000000000000000000000000000000000000000081525060200191505060405180910390fd5b8160a081815250508060c0818152505050505060805160e01c60a05160c051612a3a6101b8600039806109d55280610ec2525080610ee35280610f97528061150a525080610c3e5280610c7b5250612a3a6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638d3638f4116100ad578063c19d93fb11610071578063c19d93fb14610666578063d88beda21461068f578063df034cd0146106ad578063e7e7a7b7146106e1578063ffa1ad741461074957610121565b80638d3638f41461043a578063928bc4b21461045e578063961681dc1461052f578063a3f81d6814610553578063b31c01fb1461059757610121565b806339992668116100f457806339992668146102cd57806345630b1a146102eb5780636188af0e1461030957806367a6771d146103da57806371bfb7b8146103f857610121565b806319d9d21a1461012657806325e3beda146102085780632bbd59ca14610226578063371d307114610273575b600080fd5b610206600480360360a081101561013c57600080fd5b8101908080359060200190929190806040019091929192908035906020019064010000000081111561016d57600080fd5b82018360208201111561017f57600080fd5b803590602001918460018302840111640100000000831117156101a157600080fd5b9091929391929390803590602001906401000000008111156101c257600080fd5b8201836020820111156101d457600080fd5b803590602001918460018302840111640100000000831117156101f657600080fd5b909192939192939050505061076a565b005b6102106109d3565b6040518082815260200191505060405180910390f35b6102526004803603602081101561023c57600080fd5b81019080803590602001909291905050506109f7565b6040518082600281111561026257fe5b815260200191505060405180910390f35b6102b5600480360361044081101561028a57600080fd5b8101908080359060200190929190806104000190919291929080359060200190929190505050610a17565b60405180821515815260200191505060405180910390f35b6102d5610b63565b6040518082815260200191505060405180910390f35b6102f3610b69565b6040518082815260200191505060405180910390f35b6103d8600480360361044081101561032057600080fd5b810190808035906020019064010000000081111561033d57600080fd5b82018360208201111561034f57600080fd5b8035906020019184600183028401116401000000008311171561037157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290806104000190919291929080359060200190929190505050610b8b565b005b6103e2610c1e565b6040518082815260200191505060405180910390f35b6104246004803603602081101561040e57600080fd5b8101908080359060200190929190505050610c24565b6040518082815260200191505060405180910390f35b610442610c3c565b604051808263ffffffff16815260200191505060405180910390f35b6105176004803603602081101561047457600080fd5b810190808035906020019064010000000081111561049157600080fd5b8201836020820111156104a357600080fd5b803590602001918460018302840111640100000000831117156104c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c60565b60405180821515815260200191505060405180910390f35b610537611230565b604051808263ffffffff16815260200191505060405180910390f35b61057f6004803603602081101561056957600080fd5b8101908080359060200190929190505050611246565b60405180821515815260200191505060405180910390f35b610664600480360360608110156105ad57600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156105de57600080fd5b8201836020820111156105f057600080fd5b8035906020019184600183028401116401000000008311171561061257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061127f565b005b61066e6114f5565b6040518082600281111561067e57fe5b815260200191505060405180910390f35b610697611508565b6040518082815260200191505060405180910390f35b6106b561152c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610747600480360360808110156106f757600080fd5b81019080803563ffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611552565b005b6107516116c1565b604051808260ff16815260200191505060405180910390f35b60028081111561077657fe5b600060169054906101000a900460ff16600281111561079157fe5b1415610805576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f6661696c6564207374617465000000000000000000000000000000000000000081525060200191505060405180910390fd5b610865868660006002811061081657fe5b602002013586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506116c6565b80156108cd57506108cc868660016002811061087d57fe5b602002013584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506116c6565b5b80156108fb5750846001600281106108e157fe5b6020020135856000600281106108f357fe5b602002013514155b156109cb57610908611778565b7f2c3f60bab4170347826231b75a920b5053941ddebc6eed6fd2c25721648b186f8686868686866040518087815260200186600260200280828437600081840152601f19601f82011690508083019250505080602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f8201169050808301925050509850505050505050505060405180910390a15b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60356020528060005260406000206000915054906101000a900460ff1681565b6000806002811115610a2557fe5b6035600086815260200190815260200160002060009054906101000a900460ff166002811115610a5157fe5b14610ac4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f214d6573736167655374617475732e4e6f6e650000000000000000000000000081525060200191505060405180910390fd5b6000610b07858560208060200260405190810160405280929190826020800280828437600081840152601f19601f82011690508083019250505050505085611782565b9050610b1281611246565b15610b565760016035600087815260200190815260200160002060006101000a81548160ff02191690836002811115610b4757fe5b02179055506001915050610b5c565b60009150505b9392505050565b60325481565b6000610b86603160009054906101000a900463ffffffff1661183b565b905090565b610b9d83805190602001208383610a17565b610c0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260068152602001807f2170726f7665000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610c1883610c60565b50505050565b60015481565b60346020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610c7760008461189c90919063ffffffff16565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16610caf8262ffffff19166118c7565b63ffffffff1614610d28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f2164657374696e6174696f6e000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000610d398262ffffff19166118ed565b905060016002811115610d4857fe5b6035600083815260200190815260200160002060009054906101000a900460ff166002811115610d7457fe5b14610de7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f2170726f76656e0000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001603360009054906101000a900460ff1660ff1614610e6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f217265656e7472616e740000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000603360006101000a81548160ff021916908360ff16021790555060026035600083815260200190815260200160002060006101000a81548160ff02191690836002811115610ebb57fe5b02179055507f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000015a1015610f78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f216761730000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000610f898362ffffff1916611930565b9050600080610100905060007f0000000000000000000000000000000000000000000000000000000000000000905060008267ffffffffffffffff81118015610fd157600080fd5b506040519080825280601f01601f1916602001820160405280156110045781602001600182028036833780820191505090505b50905060006110188862ffffff191661194a565b6110278962ffffff1916611970565b6110446110398b62ffffff1916611996565b62ffffff19166119dc565b604051602401808463ffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561109957808201518184015260208101905061107e565b50505050905090810190601f1680156110c65780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040527f56d5d475000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008082516020840160008a88f198503d94508385111561116b578394505b848252846000602084013e816040518082805190602001908083835b602083106111aa5780518252602082019150602081019050602083039250611187565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020891515887fd42de95a9b26f1be134c8ecce389dc4fcfa18753d01661b7b361233569e8fe4860405160405180910390a46001603360006101000a81548160ff021916908360ff1602179055505050505050505050919050565b603160009054906101000a900463ffffffff1681565b60008060346000848152602001908152602001600020549050600081141561127257600091505061127a565b804210159150505b919050565b60028081111561128b57fe5b600060169054906101000a900460ff1660028111156112a657fe5b141561131a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f6661696c6564207374617465000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001548314611391576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6e6f742063757272656e7420757064617465000000000000000000000000000081525060200191505060405180910390fd5b61139c8383836116c6565b61140e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f217570646174657220736967000000000000000000000000000000000000000081525060200191505060405180910390fd5b611416611a23565b60325442016034600084815260200190815260200160002081905550816001819055508183603160009054906101000a900463ffffffff1663ffffffff167f608828ad904a0c9250c09004ba7226efb08f35a5c815bb3f76b5a8a271cd08b2846040518080602001828103825283818151815260200191508051906020019080838360005b838110156114b657808201518184015260208101905061149b565b50505050905090810190601f1680156114e35780820380516001836020036101000a031916815260200191505b509250505060405180910390a4505050565b600060169054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16806115715750611570611a25565b5b80611587575060008054906101000a900460ff16155b6115dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806128f3602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561162c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61163584611a36565b6001603360006101000a81548160ff021916908360ff16021790555084603160006101000a81548163ffffffff021916908363ffffffff16021790555082600181905550600160346000858152602001908152602001600020819055508160328190555080156116ba5760008060016101000a81548160ff0219169083151502179055505b5050505050565b600081565b6000806116d1610b69565b858560405160200180848152602001838152602001828152602001935050505060405160208183030381529060405280519060200120905061171281611b9a565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166117578285611bf2565b73ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b611780611c9f565b565b600083905060005b602081101561183357600060018285901c16905060008583602081106117ac57fe5b6020020151905060018214156117f25780846040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209350611824565b838160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012093505b5050808060010191505061178a565b509392505050565b600081604051602001808263ffffffff1660e01b8152600401807f4f50544943530000000000000000000000000000000000000000000000000000815250600601915050604051602081830303815290604052805190602001209050919050565b6000808351905060006020850190506118bd8464ffffffffff168284611cc5565b9250505092915050565b60006118e6602860048462ffffff1916611d349092919063ffffffff16565b9050919050565b6000806118f983611d59565b6bffffffffffffffffffffffff169050600061191484611d79565b6bffffffffffffffffffffffff16905080822092505050919050565b600061194361193e83611d99565b611dbf565b9050919050565b6000611969600060048462ffffff1916611d349092919063ffffffff16565b9050919050565b600061198f600460208462ffffff1916611dcc9092919063ffffffff16565b9050919050565b60006119d5604c806119ad8562ffffff1916611d79565b6bffffffffffffffffffffffff160360008562ffffff1916611f93909392919063ffffffff16565b9050919050565b60606000806119ea84611d79565b6bffffffffffffffffffffffff1690506040519150819250611a0f846020840161203f565b506020818301016040528082525050919050565b565b6000611a3030612176565b15905090565b600060019054906101000a900460ff1680611a555750611a54611a25565b5b80611a6b575060008054906101000a900460ff16155b611ac0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806128f3602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611b10576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060166101000a81548160ff02191690836002811115611b7057fe5b02179055508015611b965760008060016101000a81548160ff0219169083151502179055505b5050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b60006041825114611c6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081525060200191505060405180910390fd5b60008060006020850151925060408501519150606085015160001a9050611c9486828585612189565b935050505092915050565b6002600060166101000a81548160ff02191690836002811115611cbe57fe5b0217905550565b600080611cdb838561238890919063ffffffff16565b9050604051811115611cec57600090505b6000811415611d1e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000915050611d2d565b611d2985858561240b565b9150505b9392505050565b60006008826020030260ff16611d4b858585611dcc565b60001c901c90509392505050565b6000806bffffffffffffffffffffffff9050808360781c16915050919050565b6000806bffffffffffffffffffffffff9050808360181c16915050919050565b6000611db8602c60208462ffffff1916611dcc9092919063ffffffff16565b9050919050565b60008160001c9050919050565b6000808260ff161415611de4576000801b9050611f8c565b611ded84611d79565b6bffffffffffffffffffffffff16611e118360ff168561238890919063ffffffff16565b1115611ef357611e52611e2385611d59565b6bffffffffffffffffffffffff16611e3a86611d79565b6bffffffffffffffffffffffff16858560ff1661242c565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611eb8578082015181840152602081019050611e9d565b50505050905090810190601f168015611ee55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60208260ff161115611f50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180612943603a913960400191505060405180910390fd5b60006008830290506000611f6386611d59565b6bffffffffffffffffffffffff1690506000611f7e83612566565b905080868301511693505050505b9392505050565b600080611f9f86611d59565b6bffffffffffffffffffffffff169050611fb886612595565b611fdd85611fcf888561238890919063ffffffff16565b61238890919063ffffffff16565b111561200c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000915050612037565b61201f858261238890919063ffffffff16565b90506120338364ffffffffff168286611cc5565b9150505b949350505050565b600061204a836125bf565b61209f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061297d6028913960400191505060405180910390fd5b6120a8836125d2565b6120fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806129a5602b913960400191505060405180910390fd5b600061210884611d79565b6bffffffffffffffffffffffff169050600061212385611d59565b6bffffffffffffffffffffffff16905060006040519050848111156121485760206060fd5b8285848460045afa5061216b61215d87612615565b64ffffffffff16868561240b565b935050505092915050565b600080823b905060008111915050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115612207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806128b06022913960400191505060405180910390fd5b601b8460ff16148061221c5750601c8460ff16145b612271576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806129216022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156122cd573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561237c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f45434453413a20696e76616c6964207369676e6174757265000000000000000081525060200191505060405180910390fd5b80915050949350505050565b6000818301905082811015612405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4f766572666c6f7720647572696e67206164646974696f6e2e0000000000000081525060200191505060405180910390fd5b92915050565b600083811760601b905082811760601b905081811760181b90509392505050565b6060600061243986612622565b915050600061244786612622565b915050600061245586612622565b915050600061246386612622565b9150508383838360405160200180806129d0603591396035018565ffffffffffff1660d01b8152600601807f2077697468206c656e6774682030780000000000000000000000000000000000815250600f018465ffffffffffff1660d01b8152600601806128d2602191396021018365ffffffffffff1660d01b8152600601807f2077697468206c656e6774682030780000000000000000000000000000000000815250600f018265ffffffffffff1660d01b8152600601807f2e00000000000000000000000000000000000000000000000000000000000000815250600101945050505050604051602081830303815290604052945050505050949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000600183031d9050919050565b60006125a082611d79565b6125a983611d59565b016bffffffffffffffffffffffff169050919050565b60006125ca826126ce565b159050919050565b600064ffffffffff6125e383612615565b64ffffffffff1614156125f95760009050612610565b600061260483612595565b90506040518111199150505b919050565b60008160d81c9050919050565b6000806000601f90505b600f8160ff1611156126765760006008820260ff1685901c905061264f81612706565b61ffff168417935060108260ff161461266a57601084901b93505b5060018103905061262c565b506000600f90505b60ff8160ff1610156126c85760006008820260ff1685901c90506126a181612706565b61ffff168317925060008260ff16146126bc57601083901b92505b5060018103905061267e565b50915091565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000062ffffff19168262ffffff1916149050919050565b600061271860048360ff16901c61273f565b60ff168117905060088161ffff16901b90506127338261273f565b60ff1681179050919050565b60008060f08317905060f08160ff16141561275e5760309150506128aa565b60f18160ff1614156127745760319150506128aa565b60f28160ff16141561278a5760329150506128aa565b60f38160ff1614156127a05760339150506128aa565b60f48160ff1614156127b65760349150506128aa565b60f58160ff1614156127cc5760359150506128aa565b60f68160ff1614156127e25760369150506128aa565b60f78160ff1614156127f85760379150506128aa565b60f88160ff16141561280e5760389150506128aa565b60f98160ff1614156128245760399150506128aa565b60fa8160ff16141561283a5760619150506128aa565b60fb8160ff1614156128505760629150506128aa565b60fc8160ff1614156128665760639150506128aa565b60fd8160ff16141561287c5760649150506128aa565b60fe8160ff1614156128925760659150506128aa565b60ff8160ff1614156128a85760669150506128aa565b505b91905056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c75652e20417474656d7074656420746f20696e646578206174206f6666736574203078496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c756554797065644d656d566965772f696e646578202d20417474656d7074656420746f20696e646578206d6f7265207468616e20333220627974657354797065644d656d566965772f636f7079546f202d204e756c6c20706f696e74657220646572656654797065644d656d566965772f636f7079546f202d20496e76616c696420706f696e74657220646572656654797065644d656d566965772f696e646578202d204f76657272616e2074686520766965772e20536c696365206973206174203078a264697066735822122038cc0e7de1037b45fa89858a0f0f3cbae8d13ae9fdc84d69dfaf454156bb7c9064736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638d3638f4116100ad578063c19d93fb11610071578063c19d93fb14610666578063d88beda21461068f578063df034cd0146106ad578063e7e7a7b7146106e1578063ffa1ad741461074957610121565b80638d3638f41461043a578063928bc4b21461045e578063961681dc1461052f578063a3f81d6814610553578063b31c01fb1461059757610121565b806339992668116100f457806339992668146102cd57806345630b1a146102eb5780636188af0e1461030957806367a6771d146103da57806371bfb7b8146103f857610121565b806319d9d21a1461012657806325e3beda146102085780632bbd59ca14610226578063371d307114610273575b600080fd5b610206600480360360a081101561013c57600080fd5b8101908080359060200190929190806040019091929192908035906020019064010000000081111561016d57600080fd5b82018360208201111561017f57600080fd5b803590602001918460018302840111640100000000831117156101a157600080fd5b9091929391929390803590602001906401000000008111156101c257600080fd5b8201836020820111156101d457600080fd5b803590602001918460018302840111640100000000831117156101f657600080fd5b909192939192939050505061076a565b005b6102106109d3565b6040518082815260200191505060405180910390f35b6102526004803603602081101561023c57600080fd5b81019080803590602001909291905050506109f7565b6040518082600281111561026257fe5b815260200191505060405180910390f35b6102b5600480360361044081101561028a57600080fd5b8101908080359060200190929190806104000190919291929080359060200190929190505050610a17565b60405180821515815260200191505060405180910390f35b6102d5610b63565b6040518082815260200191505060405180910390f35b6102f3610b69565b6040518082815260200191505060405180910390f35b6103d8600480360361044081101561032057600080fd5b810190808035906020019064010000000081111561033d57600080fd5b82018360208201111561034f57600080fd5b8035906020019184600183028401116401000000008311171561037157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290806104000190919291929080359060200190929190505050610b8b565b005b6103e2610c1e565b6040518082815260200191505060405180910390f35b6104246004803603602081101561040e57600080fd5b8101908080359060200190929190505050610c24565b6040518082815260200191505060405180910390f35b610442610c3c565b604051808263ffffffff16815260200191505060405180910390f35b6105176004803603602081101561047457600080fd5b810190808035906020019064010000000081111561049157600080fd5b8201836020820111156104a357600080fd5b803590602001918460018302840111640100000000831117156104c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c60565b60405180821515815260200191505060405180910390f35b610537611230565b604051808263ffffffff16815260200191505060405180910390f35b61057f6004803603602081101561056957600080fd5b8101908080359060200190929190505050611246565b60405180821515815260200191505060405180910390f35b610664600480360360608110156105ad57600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156105de57600080fd5b8201836020820111156105f057600080fd5b8035906020019184600183028401116401000000008311171561061257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061127f565b005b61066e6114f5565b6040518082600281111561067e57fe5b815260200191505060405180910390f35b610697611508565b6040518082815260200191505060405180910390f35b6106b561152c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610747600480360360808110156106f757600080fd5b81019080803563ffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611552565b005b6107516116c1565b604051808260ff16815260200191505060405180910390f35b60028081111561077657fe5b600060169054906101000a900460ff16600281111561079157fe5b1415610805576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f6661696c6564207374617465000000000000000000000000000000000000000081525060200191505060405180910390fd5b610865868660006002811061081657fe5b602002013586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506116c6565b80156108cd57506108cc868660016002811061087d57fe5b602002013584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506116c6565b5b80156108fb5750846001600281106108e157fe5b6020020135856000600281106108f357fe5b602002013514155b156109cb57610908611778565b7f2c3f60bab4170347826231b75a920b5053941ddebc6eed6fd2c25721648b186f8686868686866040518087815260200186600260200280828437600081840152601f19601f82011690508083019250505080602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f8201169050808301925050509850505050505050505060405180910390a15b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60356020528060005260406000206000915054906101000a900460ff1681565b6000806002811115610a2557fe5b6035600086815260200190815260200160002060009054906101000a900460ff166002811115610a5157fe5b14610ac4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f214d6573736167655374617475732e4e6f6e650000000000000000000000000081525060200191505060405180910390fd5b6000610b07858560208060200260405190810160405280929190826020800280828437600081840152601f19601f82011690508083019250505050505085611782565b9050610b1281611246565b15610b565760016035600087815260200190815260200160002060006101000a81548160ff02191690836002811115610b4757fe5b02179055506001915050610b5c565b60009150505b9392505050565b60325481565b6000610b86603160009054906101000a900463ffffffff1661183b565b905090565b610b9d83805190602001208383610a17565b610c0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260068152602001807f2170726f7665000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610c1883610c60565b50505050565b60015481565b60346020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610c7760008461189c90919063ffffffff16565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16610caf8262ffffff19166118c7565b63ffffffff1614610d28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f2164657374696e6174696f6e000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000610d398262ffffff19166118ed565b905060016002811115610d4857fe5b6035600083815260200190815260200160002060009054906101000a900460ff166002811115610d7457fe5b14610de7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f2170726f76656e0000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001603360009054906101000a900460ff1660ff1614610e6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f217265656e7472616e740000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000603360006101000a81548160ff021916908360ff16021790555060026035600083815260200190815260200160002060006101000a81548160ff02191690836002811115610ebb57fe5b02179055507f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000015a1015610f78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f216761730000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000610f898362ffffff1916611930565b9050600080610100905060007f0000000000000000000000000000000000000000000000000000000000000000905060008267ffffffffffffffff81118015610fd157600080fd5b506040519080825280601f01601f1916602001820160405280156110045781602001600182028036833780820191505090505b50905060006110188862ffffff191661194a565b6110278962ffffff1916611970565b6110446110398b62ffffff1916611996565b62ffffff19166119dc565b604051602401808463ffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561109957808201518184015260208101905061107e565b50505050905090810190601f1680156110c65780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040527f56d5d475000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008082516020840160008a88f198503d94508385111561116b578394505b848252846000602084013e816040518082805190602001908083835b602083106111aa5780518252602082019150602081019050602083039250611187565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020891515887fd42de95a9b26f1be134c8ecce389dc4fcfa18753d01661b7b361233569e8fe4860405160405180910390a46001603360006101000a81548160ff021916908360ff1602179055505050505050505050919050565b603160009054906101000a900463ffffffff1681565b60008060346000848152602001908152602001600020549050600081141561127257600091505061127a565b804210159150505b919050565b60028081111561128b57fe5b600060169054906101000a900460ff1660028111156112a657fe5b141561131a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f6661696c6564207374617465000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001548314611391576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6e6f742063757272656e7420757064617465000000000000000000000000000081525060200191505060405180910390fd5b61139c8383836116c6565b61140e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f217570646174657220736967000000000000000000000000000000000000000081525060200191505060405180910390fd5b611416611a23565b60325442016034600084815260200190815260200160002081905550816001819055508183603160009054906101000a900463ffffffff1663ffffffff167f608828ad904a0c9250c09004ba7226efb08f35a5c815bb3f76b5a8a271cd08b2846040518080602001828103825283818151815260200191508051906020019080838360005b838110156114b657808201518184015260208101905061149b565b50505050905090810190601f1680156114e35780820380516001836020036101000a031916815260200191505b509250505060405180910390a4505050565b600060169054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16806115715750611570611a25565b5b80611587575060008054906101000a900460ff16155b6115dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806128f3602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561162c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61163584611a36565b6001603360006101000a81548160ff021916908360ff16021790555084603160006101000a81548163ffffffff021916908363ffffffff16021790555082600181905550600160346000858152602001908152602001600020819055508160328190555080156116ba5760008060016101000a81548160ff0219169083151502179055505b5050505050565b600081565b6000806116d1610b69565b858560405160200180848152602001838152602001828152602001935050505060405160208183030381529060405280519060200120905061171281611b9a565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166117578285611bf2565b73ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b611780611c9f565b565b600083905060005b602081101561183357600060018285901c16905060008583602081106117ac57fe5b6020020151905060018214156117f25780846040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209350611824565b838160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012093505b5050808060010191505061178a565b509392505050565b600081604051602001808263ffffffff1660e01b8152600401807f4f50544943530000000000000000000000000000000000000000000000000000815250600601915050604051602081830303815290604052805190602001209050919050565b6000808351905060006020850190506118bd8464ffffffffff168284611cc5565b9250505092915050565b60006118e6602860048462ffffff1916611d349092919063ffffffff16565b9050919050565b6000806118f983611d59565b6bffffffffffffffffffffffff169050600061191484611d79565b6bffffffffffffffffffffffff16905080822092505050919050565b600061194361193e83611d99565b611dbf565b9050919050565b6000611969600060048462ffffff1916611d349092919063ffffffff16565b9050919050565b600061198f600460208462ffffff1916611dcc9092919063ffffffff16565b9050919050565b60006119d5604c806119ad8562ffffff1916611d79565b6bffffffffffffffffffffffff160360008562ffffff1916611f93909392919063ffffffff16565b9050919050565b60606000806119ea84611d79565b6bffffffffffffffffffffffff1690506040519150819250611a0f846020840161203f565b506020818301016040528082525050919050565b565b6000611a3030612176565b15905090565b600060019054906101000a900460ff1680611a555750611a54611a25565b5b80611a6b575060008054906101000a900460ff16155b611ac0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806128f3602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611b10576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060166101000a81548160ff02191690836002811115611b7057fe5b02179055508015611b965760008060016101000a81548160ff0219169083151502179055505b5050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b60006041825114611c6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081525060200191505060405180910390fd5b60008060006020850151925060408501519150606085015160001a9050611c9486828585612189565b935050505092915050565b6002600060166101000a81548160ff02191690836002811115611cbe57fe5b0217905550565b600080611cdb838561238890919063ffffffff16565b9050604051811115611cec57600090505b6000811415611d1e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000915050611d2d565b611d2985858561240b565b9150505b9392505050565b60006008826020030260ff16611d4b858585611dcc565b60001c901c90509392505050565b6000806bffffffffffffffffffffffff9050808360781c16915050919050565b6000806bffffffffffffffffffffffff9050808360181c16915050919050565b6000611db8602c60208462ffffff1916611dcc9092919063ffffffff16565b9050919050565b60008160001c9050919050565b6000808260ff161415611de4576000801b9050611f8c565b611ded84611d79565b6bffffffffffffffffffffffff16611e118360ff168561238890919063ffffffff16565b1115611ef357611e52611e2385611d59565b6bffffffffffffffffffffffff16611e3a86611d79565b6bffffffffffffffffffffffff16858560ff1661242c565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611eb8578082015181840152602081019050611e9d565b50505050905090810190601f168015611ee55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60208260ff161115611f50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180612943603a913960400191505060405180910390fd5b60006008830290506000611f6386611d59565b6bffffffffffffffffffffffff1690506000611f7e83612566565b905080868301511693505050505b9392505050565b600080611f9f86611d59565b6bffffffffffffffffffffffff169050611fb886612595565b611fdd85611fcf888561238890919063ffffffff16565b61238890919063ffffffff16565b111561200c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000915050612037565b61201f858261238890919063ffffffff16565b90506120338364ffffffffff168286611cc5565b9150505b949350505050565b600061204a836125bf565b61209f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061297d6028913960400191505060405180910390fd5b6120a8836125d2565b6120fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806129a5602b913960400191505060405180910390fd5b600061210884611d79565b6bffffffffffffffffffffffff169050600061212385611d59565b6bffffffffffffffffffffffff16905060006040519050848111156121485760206060fd5b8285848460045afa5061216b61215d87612615565b64ffffffffff16868561240b565b935050505092915050565b600080823b905060008111915050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115612207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806128b06022913960400191505060405180910390fd5b601b8460ff16148061221c5750601c8460ff16145b612271576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806129216022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156122cd573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561237c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f45434453413a20696e76616c6964207369676e6174757265000000000000000081525060200191505060405180910390fd5b80915050949350505050565b6000818301905082811015612405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4f766572666c6f7720647572696e67206164646974696f6e2e0000000000000081525060200191505060405180910390fd5b92915050565b600083811760601b905082811760601b905081811760181b90509392505050565b6060600061243986612622565b915050600061244786612622565b915050600061245586612622565b915050600061246386612622565b9150508383838360405160200180806129d0603591396035018565ffffffffffff1660d01b8152600601807f2077697468206c656e6774682030780000000000000000000000000000000000815250600f018465ffffffffffff1660d01b8152600601806128d2602191396021018365ffffffffffff1660d01b8152600601807f2077697468206c656e6774682030780000000000000000000000000000000000815250600f018265ffffffffffff1660d01b8152600601807f2e00000000000000000000000000000000000000000000000000000000000000815250600101945050505050604051602081830303815290604052945050505050949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000600183031d9050919050565b60006125a082611d79565b6125a983611d59565b016bffffffffffffffffffffffff169050919050565b60006125ca826126ce565b159050919050565b600064ffffffffff6125e383612615565b64ffffffffff1614156125f95760009050612610565b600061260483612595565b90506040518111199150505b919050565b60008160d81c9050919050565b6000806000601f90505b600f8160ff1611156126765760006008820260ff1685901c905061264f81612706565b61ffff168417935060108260ff161461266a57601084901b93505b5060018103905061262c565b506000600f90505b60ff8160ff1610156126c85760006008820260ff1685901c90506126a181612706565b61ffff168317925060008260ff16146126bc57601083901b92505b5060018103905061267e565b50915091565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000062ffffff19168262ffffff1916149050919050565b600061271860048360ff16901c61273f565b60ff168117905060088161ffff16901b90506127338261273f565b60ff1681179050919050565b60008060f08317905060f08160ff16141561275e5760309150506128aa565b60f18160ff1614156127745760319150506128aa565b60f28160ff16141561278a5760329150506128aa565b60f38160ff1614156127a05760339150506128aa565b60f48160ff1614156127b65760349150506128aa565b60f58160ff1614156127cc5760359150506128aa565b60f68160ff1614156127e25760369150506128aa565b60f78160ff1614156127f85760379150506128aa565b60f88160ff16141561280e5760389150506128aa565b60f98160ff1614156128245760399150506128aa565b60fa8160ff16141561283a5760619150506128aa565b60fb8160ff1614156128505760629150506128aa565b60fc8160ff1614156128665760639150506128aa565b60fd8160ff16141561287c5760649150506128aa565b60fe8160ff1614156128925760659150506128aa565b60ff8160ff1614156128a85760669150506128aa565b505b91905056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c75652e20417474656d7074656420746f20696e646578206174206f6666736574203078496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c756554797065644d656d566965772f696e646578202d20417474656d7074656420746f20696e646578206d6f7265207468616e20333220627974657354797065644d656d566965772f636f7079546f202d204e756c6c20706f696e74657220646572656654797065644d656d566965772f636f7079546f202d20496e76616c696420706f696e74657220646572656654797065644d656d566965772f696e646578202d204f76657272616e2074686520766965772e20536c696365206973206174203078a264697066735822122038cc0e7de1037b45fa89858a0f0f3cbae8d13ae9fdc84d69dfaf454156bb7c9064736f6c63430007060033",
  "devdoc": {
    "author": "Celo Labs Inc.",
    "events": {
      "Process(bytes32,bool,bytes)": {
        "params": {
          "messageHash": "Hash of message that failed to process",
          "returnData": "the return data from the external call",
          "success": "TRUE if the call was executed successfully, FALSE if the call reverted"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptableRoot(bytes32)": {
        "params": {
          "_root": "the Merkle root, submitted in an update, to check"
        },
        "returns": {
          "_0": "TRUE iff root has been submitted & timeout has expired"
        }
      },
      "doubleUpdate(bytes32,bytes32[2],bytes,bytes)": {
        "details": "When `fail()` is called on Home, updater is slashed.",
        "params": {
          "_newRoot": "Array containing two conflicting new roots",
          "_oldRoot": "Old root shared between two conflicting updates",
          "_signature": "Signature on `_oldRoot` and `_newRoot`[0]",
          "_signature2": "Signature on `_oldRoot` and `_newRoot`[1]"
        }
      },
      "process(bytes)": {
        "details": "Recipient must implement a `handle` method (refer to IMessageRecipient.sol) Reverts if formatted message's destination domain is not the Replica's domain, if message has not been proven, or if not enough gas is provided for the dispatch transaction.",
        "params": {
          "_message": "Formatted message"
        },
        "returns": {
          "_success": "TRUE iff dispatch transaction succeeded"
        }
      },
      "prove(bytes32,bytes32[32],uint256)": {
        "details": "Reverts if message's MessageStatus != None (i.e. if message was already proven or processed)For convenience, we allow proving against any previous root. This means that witnesses never need to be updated for the new root",
        "params": {
          "_index": "Index of leaf in home's merkle tree",
          "_leaf": "Leaf of message to prove",
          "_proof": "Merkle proof of inclusion for leaf"
        },
        "returns": {
          "_0": "Returns true if proof was valid and `prove` call succeeded*"
        }
      },
      "proveAndProcess(bytes,bytes32[32],uint256)": {
        "details": "Reverts if `prove` call returns false",
        "params": {
          "_index": "Index of leaf in home's merkle tree",
          "_message": "Formatted message (refer to Common.sol Message library)",
          "_proof": "Merkle proof of inclusion for message's leaf"
        }
      },
      "update(bytes32,bytes32,bytes)": {
        "details": "Reverts if update doesn't build off latest committedRoot or if signature is invalid.",
        "params": {
          "_newRoot": "New merkle root",
          "_oldRoot": "Old merkle root",
          "_signature": "Updater's signature on `_oldRoot` and `_newRoot`"
        }
      }
    },
    "title": "Replica",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DoubleUpdate(bytes32,bytes32[2],bytes,bytes)": {
        "notice": "Emitted when proof of a double update is submitted, which sets the contract to FAILED state"
      },
      "Process(bytes32,bool,bytes)": {
        "notice": "Emitted when message is processed"
      },
      "Update(uint32,bytes32,bytes32,bytes)": {
        "notice": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica"
      }
    },
    "kind": "user",
    "methods": {
      "acceptableRoot(bytes32)": {
        "notice": "Check that the root has been submitted and that the optimistic timeout period has expired, meaning the root can be processed"
      },
      "doubleUpdate(bytes32,bytes32[2],bytes,bytes)": {
        "notice": "Called by external agent. Checks that signatures on two sets of roots are valid and that the new roots conflict with each other. If both cases hold true, the contract is failed and a `DoubleUpdate` event is emitted."
      },
      "homeDomainHash()": {
        "notice": "Hash of Home domain concatenated with \"OPTICS\""
      },
      "process(bytes)": {
        "notice": "Given formatted message, attempts to dispatch message payload to end recipient."
      },
      "prove(bytes32,bytes32[32],uint256)": {
        "notice": "Attempts to prove the validity of message given its leaf, the merkle proof of inclusion for the leaf, and the index of the leaf."
      },
      "proveAndProcess(bytes,bytes32[32],uint256)": {
        "notice": "First attempts to prove the validity of provided formatted `message`. If the message is successfully proven, then tries to process message."
      },
      "update(bytes32,bytes32,bytes)": {
        "notice": "Called by external agent. Submits the signed update's new root, marks root's allowable confirmation time, and emits an `Update` event."
      }
    },
    "notice": "Track root updates on Home, prove and dispatch messages to end recipients.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3210,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3213,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "updater",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "state",
        "offset": 22,
        "slot": "0",
        "type": "t_enum(States)14"
      },
      {
        "astId": 22,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "committedRoot",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 26,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "__GAP",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 860,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "remoteDomain",
        "offset": 0,
        "slot": "49",
        "type": "t_uint32"
      },
      {
        "astId": 862,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "optimisticSeconds",
        "offset": 0,
        "slot": "50",
        "type": "t_uint256"
      },
      {
        "astId": 864,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "entered",
        "offset": 0,
        "slot": "51",
        "type": "t_uint8"
      },
      {
        "astId": 868,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "confirmAt",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 872,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "messages",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_bytes32,t_enum(MessageStatus)854)"
      },
      {
        "astId": 876,
        "contract": "@celo-org/optics-sol/contracts/Replica.sol:Replica",
        "label": "__GAP",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)44_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(MessageStatus)854": {
        "encoding": "inplace",
        "label": "enum Replica.MessageStatus",
        "numberOfBytes": "1"
      },
      "t_enum(States)14": {
        "encoding": "inplace",
        "label": "enum Common.States",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_enum(MessageStatus)854)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum Replica.MessageStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(MessageStatus)854"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}